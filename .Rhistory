# http://www.johnverostek.com/wp-content/uploads/2014/02/ISLR-First-Printing_CH10-Clustering.pdf
library("ISLR")
#################
library(Biobase)
library(GEOquery)
library(plyr)
library(siggenes)
library(limma)
library(amap)
############
a = data.matrix(NCI60$data)
b = data.matrix(NCI60$labs)
rownames(a)<-b
renal = data.matrix(a[rownames(a)=="RENAL", ])
######### PCA
pr.out =prcomp (a , scale = TRUE)
Cols= function (vec ){
cols= rainbow (length ( unique (vec )))
return (cols[as.numeric (as.factor ( vec ))])
}
par ( mfrow =c(1 ,2) )
plot(pr.out$x [ ,1:2] , col =Cols(b), pch =19,
xlab ="Z1", ylab =" Z2")
plot(pr.out$x [,c(1 ,3) ], col =Cols(b), pch =19,
xlab ="Z1", ylab =" Z3")
summary(pr.out)
plot(pr.out)
####################
pve =100* pr.out$sdev ^2/ sum (pr.out$sdev ^2)
par ( mfrow =c(1 ,2) )
plot(pve , type ="o", ylab =" PVE ", xlab =" Principal Component ",
col =" blue ")
plot( cumsum (pve ), type ="o", ylab =" Cumulative PVE ", xlab ="
Principal Component ", col =" brown3 ")
############## CLUSTERING
sd.data= scale (a)
par ( mfrow =c(1 ,3) )
data.dist =dist(sd.data)
plot( hclust ( data.dist ), labels =b , main =" Complete
Linkage ", xlab ="", sub ="", ylab ="")
plot( hclust ( data.dist , method ="average"), labels =b,
main =" Average Linkage ", xlab ="", sub ="", ylab ="")
plot( hclust ( data.dist , method ="single") , labels =b ,
main =" Single Linkage ", xlab ="", sub ="", ylab ="")
hc.out =hclust (dist (sd.data))
hc.clusters = cutree (hc.out ,4)
table (hc.clusters ,b)
par (mfrow =c(1 ,1) )
plot(hc.out , labels =b)
abline (h=139 , col =" red ")
####################################
# CARGADO DE DATOS PARA LOS NOMBRES DE LAS MUESTRAS DESDE EL GEN OMNIBUS CON BASE DE DATOS DE AHI
db <- getGEO('GDS1761', destdir=".")
# CARGADO DE METADADOS DEL DATASET
Meta(db)$dataset_id
Meta(db)$platform_organism
Meta(db)$feature_count
Meta(db)$sample_count
colnames(Table(db))
Table(db)[1:5,1:7]
matriz_log<- GDS2eSet(db, do.log2=TRUE)
NCI60.genes=featureData(matriz_log)$"Gene symbol"
###############################################################
### INICIO DE BÚSQUEDA DE GENES DIFERENCIALMENTE EXPRESADOS
#########################################################3
NEC60.matrizexpresion = t(sd.data)
###########################################################################
### SE ELIMINAN VALORES NA Y ESPACIOS VACIOS
NEC60.matrizexpresionomit <- na.omit(NEC60.matrizexpresion) #NA
NEC60.matrizexpresionomit <- NEC60.matrizexpresion[rownames(NEC60.matrizexpresionomit) != "",] #vacios
NEC60.matrizexpresionomit[1:10,1:6]
###############################
rownames(NEC60.matrizexpresionomit)<-gsub("/","-",rownames(NEC60.matrizexpresionomit))
#promediar genes repetidos
NEC60.matriz_expresion_promedio<-aggregate(NEC60.matrizexpresionomit, by=list(rownames(NEC60.matrizexpresionomit)),
FUN=mean)
#Al promediar los nombres de genes se convierten en columnas
#por eso se deben reasignar como nombres de filas
NEC60.matriz_expresion_promedio<- data.frame(NEC60.matriz_expresion_promedio[,-1],
row.names=NEC60.matriz_expresion_promedio[,1])
NEC60.matriz_expresion_promedio[1:10,1:6]
#################################################################################
#########################################################################################################
#Hipótesis
#(H0): No hay capacidad de discriminación entre clase normal y clase cáncer.
#(H1): Hay capacidad de discriminación entre clase normal y clase cáncer.
#alfa=0,05
#Si p =< alfa se rechaza la hipótesis nula (H0).
#Si p > alfa no se rechaza la hipótesis nula (H0).
#Obtengo p.value desde Test t, variables: NORMAL(muestra 14-21) y CANCER (muestra 1-13)
#El 1, indica que se aplica a nivel de filas.
pvals=apply(NEC60.matriz_expresion_promedio,1,function(x) {t.test(x[14:21],x[1:13],)$p.value})
#Asignar p.value al gen correspondiente
NEC60.matriz_expresion_promedio$p <- pvals
#Ordenar de - a + la matriz de acuerdo al p.value de cada gen.
ordenarValoresP<-NEC60.matriz_expresion_promedio[order(pvals),]
NEC60.matriz_expresion_discriminativos<-subset(ordenarValoresP, p<=0.05)
head(NEC60.matriz_expresion_discriminativos)
# SE NOMRAN COLUMNAS NUEVAMENTE AHORA CON "P.VALUE"
colnames(NEC60.matriz_expresion_discriminativos) <- c(b,"p.value")
########################################################################################################
#LIMMA
###########
groups = b
f = factor(groups,levels=c("RENAL","CNS","BREAST","NSCLC","UNKNOWN","OVARIAN","MELANOMA","PROSTATE","LEUKEMIA","K562B-repro","K562A-repro","COLON","MCF7A-repro","MCF7D-repro"))
## Se crea el modelo necesario para la implementación del métoMCF7Areprodo
design = model.matrix(~ 0 + f)
colnames(design) =c("RENAL","CNS","BREAST","NSCLC","UNKNOWN","OVARIAN","MELANOMA","PROSTATE","LEUKEMIA","K562Brepro","K562Arepro","COLON","MCF7Arepro","MCF7Drepro")
NEC60.matriz_expresion_discriminativos_sinp<-NEC60.matriz_expresion_promedio[ ,-65]
colnames(NEC60.matriz_expresion_discriminativos_sinp) <- c(groups)
data.fit = lmFit(NEC60.matriz_expresion_discriminativos_sinp,design)
data.fit$coefficients[1:10,]
#####
## Se crea un segundo factor de prueba
f2 = factor(groups,c("RENAL","CNS","BREAST","NSCLC","UNKNOWN","OVARIAN","MELANOMA","PROSTATE","LEUKEMIA","K562Brepro","K562Arepro","COLON","MCF7Arepro","MCF7Drepro"))
design2 = model.matrix(~ 0 + f2) # y un segundo modelo de prueba
colnames(design2) = c("RENAL","CNS","BREAST","NSCLC","UNKNOWN","OVARIAN","MELANOMA","PROSTATE","LEUKEMIA","K562Brepro","K562Arepro","COLON","MCF7Arepro","MCF7Drepro")
#Se crea la matrix de contraste
contrast.matrix = makeContrasts(RENAL - CNS - BREAST - NSCLC - UNKNOWN- OVARIAN- MELANOMA -PROSTATE- LEUKEMIA -K562Brepro -K562Arepro -COLON-MCF7Arepro-MCF7Drepro,levels=design2)
data.fit.con = contrasts.fit(data.fit,contrast.matrix)
#Mediante el metodo eBayes se obtienen los genes diferencialmente expresados
data.fit.eb = eBayes(data.fit.con)
names(data.fit.eb)
data.fit.eb$coefficients[1:10,]
data.fit.eb$t[1:10,]
## Se trabajan loS datos para poder mostrarlos mÃ¡s ordenandamente
data.fit.eb$p.value[1:10,]
temp = data.matrix(data.fit.eb$p.value)
temp = temp[order(temp)]
temp[1:10]
temp = data.matrix(temp)
colnames(temp) <-  c("p-value")
temp[1:10]
summary(temp)
## Finalmene se seleciconan los genes mÃ¡s diferencialmente expresados.
temp =topTable(data.fit.eb, adjust = "fdr")
results <- decideTests(data.fit.eb)
## Y se arma una matriz para ingrearla al heatmap
matrix.genes.dif = c()
for (variable in rownames(temp)) {
matrix.genes.dif = rbind(matrix.genes.dif, NEC60.matriz_expresion_promedio[variable,])
#print(NEC60.matriz_expresion_promedio[variable,])
}
matrix.genes.dif<-na.omit(matrix.genes.dif[,1:21])
View(matrix.genes.dif)
colnames(matrix.genes.dif) <- groups
len(groups)
length(gru)
length(groups
)
groups
results
matrix.genes.dif = c()
for (variable in rownames(temp)) {
matrix.genes.dif = rbind(matrix.genes.dif, NEC60.matriz_expresion_promedio[variable,])
#print(NEC60.matriz_expresion_promedio[variable,])
}
View(matrix.genes.dif)
colnames(matrix.genes.dif) <- groups
t = as.matrix(matrix.genes.dif)
heatmap(t, main = "Heatmap de genes")
sort(t)
heatmap(t, main = "Heatmap de genes")
sort(matrix.genes.dif)
matrix.genes.dif <- matrix.genes.dif[, order(as.integer(colnames(matrix.genes.dif)))]
colnames(matrix.genes.dif) <- groups
matrix.genes.dif <- matrix.genes.dif[, order(as.integer(colnames(matrix.genes.dif)))]
colnames(matrix.genes.dif) <- groups
require(gtools)
mixedsort( colnames( matrix.genes.dif ) )
matrix.genes.dif[ , order(names(matrix.genes.dif))]
colnames(matrix.genes.dif) <- groups
matrix.genes.dif = c()
for (variable in rownames(temp)) {
matrix.genes.dif = rbind(matrix.genes.dif, NEC60.matriz_expresion_promedio[variable,])
#print(NEC60.matriz_expresion_promedio[variable,])
}
colnames(matrix.genes.dif) <- groups
require(gtools)
mixedsort( colnames( matrix.genes.dif ) )
matrix.genes.dif <- matrix.genes.dif[,groups2]
groups2 = mixedsort( colnames( matrix.genes.dif ) )
matrix.genes.dif <- matrix.genes.dif[,groups2]
(matrix.genes.dif[,order(colnames(matrix.genes.dif))])
data.frame(A, check.names=FALSE)
data.frame(matrix.genes.dif, check.names=FALSE)
View(matrix.genes.dif)
groups
order(groups)
order(colnames(mmatrix.genes.dif))
order(colnames(matrix.genes.dif))
(matrix.genes.dif[,sort(colnames(matrix.genes.dif))])
(matrix.genes.dif[,order(matrix.genes.dif)])
matrix.genes.difsinp<-matrix.genes.dif[ ,-65]
View(matrix.genes.difsinp)
(matrix.genes.difsinp[,order(matrix.genes.difsinp)])
(matrix.genes.difsinp[,order(colnames(matrix.genes.difsinp))])
(matrix.genes.difsinp[,order(colnames(matrix.genes.difsinp))])
(matrix.genes.difsinp[,order(colnames(matrix.genes.difsinp))])
(matrix.genes.difsinp[,order(colnames(matrix.genes.difsinp))])
matrix.genes.difsinp=(matrix.genes.difsinp[,order(colnames(matrix.genes.difsinp))])
matrix.genes.difsinp = matrix(matrix.genes.difsinp)
View(matrix.genes.difsinp)
matrix.genes.dif[ , order(names(matrix.genes.dif))]
View(matrix.genes.dif)
matrix.genes.difsinp<-matrix.genes.dif[ ,-65]
colnames(matrix.genes.dif) <- groups
matrix.genes.difsinp[ , order(names(matrix.genes.difsinp))]
t = as.matrix(matrix.genes.difsinp)
heatmap(t, main = "Heatmap de genes")
matrix.genes.difsinp<-matrix.genes.dif[ ,-65]
colnames(matrix.genes.difsinp) <- groups
matrix.genes.difsinp[ , order(names(matrix.genes.difsinp))]
t = as.matrix(matrix.genes.difsinp)
heatmap(t, main = "Heatmap de genes")
order(groups)
sort(groups)
matrix.genes.difsinp<-matrix.genes.dif[ ,-65]
colnames(matrix.genes.difsinp) <- groups
matrix.genes.difsinp[ , sort(groups)]
t = as.matrix(matrix.genes.difsinp)
heatmap(t, main = "Heatmap de genes")
sort(groups)
matrix.genes.difsinp[ , sort(groups)]
matrix.genes.difsinp[ , sort(groups)]
matrix.genes.difsinp <- matrix.genes.difsinp[ , sort(groups)]
colnames(matrix.genes.difsinp) <- sort(groups)
t = as.matrix(matrix.genes.difsinp)
heatmap(t, main = "Heatmap de genes")
##### QUITAR COMENTARIOS PARA INSTALAR LIBRERIAS
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("GEOquery")
#biocLite("Biobase")
#biocLite("plyr")
#biocLite("siggenes")
#biocLite("limma")
####################
# ImportaciÃ³n de librerias
library(Biobase)
library(GEOquery)
library(plyr)
library(siggenes)
library(limma)
library(amap)
####################
# CARGADO DE DATOS
#db <- getGEO('GDS2881', destdir=".")
db<-getGEO(filename='GDS2881.soft.gz')
# CARGADO DE METADADOS DEL DATASET
Meta(db)$dataset_id
Meta(db)$platform_organism
Meta(db)$feature_count
Meta(db)$sample_count
colnames(Table(db))
Table(db)[1:5,1:7]
matriz_log<- GDS2eSet(db, do.log2=TRUE)
muestras<-sampleNames(matriz_log)
genes<-featureNames(matriz_log)
expresion <- exprs(matriz_log)
matriz_expresion<-exprs(matriz_log[,])
### SE NOMBRAR FILAS Y COLUMNAS CON NOMBRES DE MUESTRAS Y GENES
colnames(matriz_expresion) <- pData(matriz_log)$"disease.state"
rownames(matriz_expresion) <- featureData(matriz_log)$"Gene symbol"
###########################################################################
### SE ELIMINAN VALORES NA Y ESPACIOS VACIOS
matriz_expresion <- na.omit(matriz_expresion) #NA
matriz_expresion <- matriz_expresion[rownames(matriz_expresion) != "",] #vacios
matriz_expresion[1:10,1:6]
##########################################################################
#Encuentra nombre de genes con / y reemplaza / por -
#los nombres de variables no pueden llevar / para evitar problemas de programaciÃ³n
rownames(matriz_expresion)<-gsub("/","-",rownames(matriz_expresion))
#promediar genes repetidos
matriz_expresion_promedio<-aggregate(matriz_expresion, by=list(rownames(matriz_expresion)),
FUN=mean)
#Al promediar los nombres de genes se convierten en columnas
#por eso se deben reasignar como nombres de filas
matriz_expresion_promedio<- data.frame(matriz_expresion_promedio[,-1],
row.names=matriz_expresion_promedio[,1])
colnames(matriz_expresion_promedio) <- pData(matriz_log)$"disease.state"
#rownames(matriz_expresion) <- featureData(matriz_log)$"Gene Symbol"
matriz_expresion_promedio[1:10,1:6]
#################################################################################
#########################################################################################################
#HipÃ³tesis
#(H0): No hay capacidad de discriminaciÃ³n entre clase normal y clase cÃ¡ncer.
#(H1): Hay capacidad de discriminaciÃ³n entre clase normal y clase cÃ¡ncer.
#alfa=0,05
#Si p =< alfa se rechaza la hipÃ³tesis nula (H0).
#Si p > alfa no se rechaza la hipÃ³tesis nula (H0).
#Obtengo p.value desde Test t, variables: NORMAL(muestra 14-21) y CANCER (muestra 1-13)
#El 1, indica que se aplica a nivel de filas.
pvals=apply(matriz_expresion_promedio,1,function(x) {t.test(x[14:21],x[1:13])$p.value})
#Asignar p.value al gen correspondiente
matriz_expresion_promedio$p <- pvals
#Ordenar de - a + la matriz de acuerdo al p.value de cada gen.
ordenarValoresP<-matriz_expresion_promedio[order(pvals),]
matriz_expresion_discriminativos<-subset(ordenarValoresP, p<=0.05)
head(matriz_expresion_discriminativos)
# SE NOMRAN COLUMNAS NUEVAMENTE AHORA CON "P.VALUE"
colnames(matriz_expresion_discriminativos) <- c(array(pData(matriz_log)$"disease.state"),"p.value")
########################################################################################################
### LIMMMA
#El paquete limma contiene funciones para el uso de t-test y ANOVA para identificar
#la expresiÃ³n diferencial de los datos de microarrays. Estas funciones se pueden utilizar
#para las plataformas de toda gama y trabajan incluso para los datos de microarrays con
#diseÃ±os complejos de mÃºltiples muestras. La idea central se basa en ajustar un modelo lineal a
#los datos de expresiÃ³n de cada gen . Los datos de expresiÃ³n pueden ser log-ratios o log-intensities.
#Limma estÃ¡ diseÃ±ado para ser utilizado en combinaciÃ³n con el paquete affy y es compatible con muchos
#otros paquetes
## Limma necesita la informaciÃ³n de phenodata que esta en la matriz_log extraida desde el dataset
ph = matriz_log@phenoData
ph@data[ ,2] = c(array(pData(matriz_log)$"disease.state"))
colnames(ph@data)[2]="source"
ph@data
groups = ph@data$source
f = factor(groups,levels=c("normal","stage I cRCC","stage II cRCC"))
## Se crea el modelo necesario para la implementaciÃ³n del mÃ©todo
design = model.matrix(~ 0 + f)
colnames(design) = c("normal","stageIcRCC","stageIIcRCC")
rownames(expresion) <- featureData(matriz_log)$"Gene symbol"
data.fit = lmFit(expresion,design)
data.fit$coefficients[1:10,]
## Se crea un segundo factor de prueba
f2 = factor(groups,levels=c("normal","stageIcRCC","stageIIcRCC"))
design2 = model.matrix(~ 0 + f2) # y un segundo modelo de prueba
colnames(design2) = c("normal","stageIcRCC","stageIIcRCC")
#Se crea la matrix de contraste
contrast.matrix = makeContrasts(normal - stageIcRCC - stageIIcRCC,levels=design2)
data.fit.con = contrasts.fit(data.fit,contrast.matrix)
#Mediante el metodo eBayes se obtienen los genes diferencialmente expresados
data.fit.eb = eBayes(data.fit.con)
names(data.fit.eb)
data.fit.eb$coefficients[1:10,]
data.fit.eb$t[1:10,]
## Se trabajan loS datos para poder mostrarlos mÃ¡s ordenandamente
data.fit.eb$p.value[1:10,]
temp = data.matrix(data.fit.eb$p.value)
temp = temp[order(temp)]
temp[1:10]
temp = data.matrix(temp)
colnames(temp) <-  c("p-value")
temp[1:10]
summary(temp)
## Finalmene se seleciconan los genes mÃ¡s diferencialmente expresados.
temp =topTable(data.fit.eb, adjust = "fdr")
results <- decideTests(data.fit.eb)
## Y se arma una matriz para ingrearla al heatmap
matrix.genes.dif = c()
for (variable in temp$ID) {
matrix.genes.dif = rbind(matrix.genes.dif, matriz_expresion_promedio[variable,])
# print(matriz_expresion_promedio[variable,])
}
matrix.genes.dif<-na.omit(matrix.genes.dif[,1:21])
t = as.matrix(matrix.genes.dif)
colnames(t) <- c(groups,"p")
heat = as.matrix(matriz_expresion_discriminativos)
colnames(heat) <- c(groups,"p")
heatmap(heat, main = "Heatmap de genes")
heatmap(t, main = "Heatmap de genes")
## y se aplica un algortimo de klustering para el anÃ¡lisis de los datos.
algoritmoKg <- Kmeans(x = t, centers=2, method="euclidean",iter.max = 100)
par(mfrow=c(1,2))
grafico<-plot(t, col = algoritmoKg$cluster,
type='n', main="K-means en genes")
points(algoritmoKg$centers, col = c("green","blue"), pch = 15, cex = 1)
text(t, labels=rownames(t),
col=algoritmoKg$cluster)
#########################################################################################################
####################
# CARGADO DE DATOS
#db <- getGEO('GDS2881', destdir=".")
db<-getGEO(filename='GDS2881.soft.gz')
# CARGADO DE METADADOS DEL DATASET
Meta(db)$dataset_id
Meta(db)$platform_organism
Meta(db)$feature_count
Meta(db)$sample_count
colnames(Table(db))
Table(db)[1:5,1:7]
matriz_log<- GDS2eSet(db, do.log2=TRUE)
muestras<-sampleNames(matriz_log)
genes<-featureNames(matriz_log)
expresion <- exprs(matriz_log)
matriz_expresion<-exprs(matriz_log[,])
# CARGADO DE DATOS
#db <- getGEO('GDS2881', destdir=".")
db<-getGEO(filename='GDS2881.soft.gz')
# CARGADO DE METADADOS DEL DATASET
Meta(db)$dataset_id
Meta(db)$platform_organism
Meta(db)$feature_count
Meta(db)$sample_count
colnames(Table(db))
Table(db)[1:5,1:7]
matriz_log<- GDS2eSet(db, do.log2=TRUE)
matriz_log<- GDS2eSet(db, do.log2=TRUE)
matriz_log<- GDS2eSet(db, do.log2=FALSE)
db <- getGEO('GDS2881', destdir=".")
# CARGADO DE METADADOS DEL DATASET
Meta(db)$dataset_id
Meta(db)$platform_organism
Meta(db)$feature_count
Meta(db)$sample_count
colnames(Table(db))
Table(db)[1:5,1:7]
matriz_log<- GDS2eSet(db, do.log2=TRUE)
